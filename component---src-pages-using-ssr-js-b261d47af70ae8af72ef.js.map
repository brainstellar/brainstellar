{"version":3,"file":"component---src-pages-using-ssr-js-b261d47af70ae8af72ef.js","mappings":"yIA8CA,IApCA,SAAYA,GAAsC,IAADC,EAAAC,EAAA,IAApC,YAAEC,EAAW,MAAEC,EAAK,IAAEC,EAAG,MAAEC,GAAON,EAC7C,MAAM,KAAEO,IAASC,EAAAA,EAAAA,gBAAe,aAe1BC,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAgC,QAApBV,EAAGM,EAAKG,oBAAY,IAAAT,OAAA,EAAjBA,EAAmBG,MAClCQ,EAAW,GAAGL,EAAKG,aAAaG,UAAUP,GAAS,cAEzD,OACEQ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQH,EAAe,GAAGP,OAAWO,IAAiBP,GACtDU,EAAAA,cAAA,QAAMC,KAAK,cAAcC,QAASP,IAClCK,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAASZ,IACnCU,EAAAA,cAAA,QAAMG,SAAS,iBAAiBD,QAASP,IACzCK,EAAAA,cAAA,QAAMG,SAAS,UAAUD,QAAQ,YACjCF,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAASJ,IACnCE,EAAAA,cAAA,QAAMC,KAAK,eAAeC,QAAQ,YAClCF,EAAAA,cAAA,QAAMC,KAAK,kBAAkBC,SAA0B,QAAjBd,EAAAK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBgB,SAAU,KACnEJ,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAASZ,IACpCU,EAAAA,cAAA,QAAMC,KAAK,sBAAsBC,QAASP,IAGhD,C,6GCtCA,MA4BaU,EAAOA,IAAML,EAAAA,cAACM,EAAAA,EAAG,CAAChB,MAAM,cAErC,UA9BiBJ,IAAqB,IAApB,WAAEqB,GAAYrB,EAC9B,OACEc,EAAAA,cAACQ,EAAAA,EAAM,KACLR,EAAAA,cAAA,UAAI,gBACWA,EAAAA,cAAA,SAAG,yBAElBA,EAAAA,cAAA,SAAG,mHAE4C,IAC7CA,EAAAA,cAAA,YAAM,yCAA4C,KAEpDA,EAAAA,cAAA,OACES,MAAO,CAAEC,MAAO,QAASC,aAAc,wBACvCC,IAAI,eACJC,IAAKN,EAAWO,UAElBd,EAAAA,cAAA,SAAG,kCAC+B,IAChCA,EAAAA,cAAA,KAAGe,KAAK,oFAAmF,6CAEvF,KAGNf,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C","sources":["webpack://brainstellar/./src/components/seo.js","webpack://brainstellar/./src/pages/using-ssr.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, url, image }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n  const imageUrl = `${site.siteMetadata.siteUrl}${image || '/logo.png'}`\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image\" content={imageUrl} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst UsingSSR = ({ serverData }) => {\n  return (\n    <Layout>\n      <h1>\n        This page is <b>rendered server-side</b>\n      </h1>\n      <p>\n        This page is rendered server side every time the page is requested.\n        Reload it to see a(nother) random photo from{\" \"}\n        <code>dog.ceo/api/breed/shiba/images/random</code>:\n      </p>\n      <img\n        style={{ width: \"320px\", borderRadius: \"var(--border-radius)\" }}\n        alt=\"A random dog\"\n        src={serverData.message}\n      />\n      <p>\n        To learn more, head over to our{\" \"}\n        <a href=\"https://www.gatsbyjs.com/docs/reference/rendering-options/server-side-rendering/\">\n          documentation about Server Side Rendering\n        </a>\n        .\n      </p>\n      <Link to=\"/\">Go back to the homepage</Link>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"Using SSR\" />\n\nexport default UsingSSR\n\nexport async function getServerData() {\n  try {\n    const res = await fetch(`https://dog.ceo/api/breed/shiba/images/random`)\n    if (!res.ok) {\n      throw new Error(`Response failed`)\n    }\n    return {\n      props: await res.json(),\n    }\n  } catch (error) {\n    return {\n      status: 500,\n      headers: {},\n      props: {},\n    }\n  }\n}\n"],"names":["_ref","_site$siteMetadata","_site$siteMetadata2","description","title","url","image","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","imageUrl","siteUrl","React","name","content","property","author","Head","Seo","serverData","Layout","style","width","borderRadius","alt","src","message","href","Link","to"],"sourceRoot":""}