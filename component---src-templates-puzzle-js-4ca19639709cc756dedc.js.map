{"version":3,"file":"component---src-templates-puzzle-js-4ca19639709cc756dedc.js","mappings":"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","sources":["webpack://brainstellar/./node_modules/extend/index.js","webpack://brainstellar/./src/components/Button.js","webpack://brainstellar/./src/components/FacebookComments.js","webpack://brainstellar/./node_modules/unist-util-stringify-position/lib/index.js","webpack://brainstellar/./node_modules/vfile-message/lib/index.js","webpack://brainstellar/./node_modules/vfile/lib/minpath.browser.js","webpack://brainstellar/./node_modules/vfile/lib/minproc.browser.js","webpack://brainstellar/./node_modules/vfile/lib/minurl.shared.js","webpack://brainstellar/./node_modules/vfile/lib/minurl.browser.js","webpack://brainstellar/./node_modules/vfile/lib/index.js","webpack://brainstellar/./node_modules/bail/index.js","webpack://brainstellar/./node_modules/is-plain-obj/index.js","webpack://brainstellar/./node_modules/trough/index.js","webpack://brainstellar/./node_modules/unified/lib/index.js","webpack://brainstellar/./node_modules/mdast-util-to-string/lib/index.js","webpack://brainstellar/./node_modules/micromark-util-chunked/index.js","webpack://brainstellar/./node_modules/micromark-util-combine-extensions/index.js","webpack://brainstellar/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://brainstellar/./node_modules/micromark-util-character/index.js","webpack://brainstellar/./node_modules/micromark-factory-space/index.js","webpack://brainstellar/./node_modules/micromark/lib/initialize/content.js","webpack://brainstellar/./node_modules/micromark/lib/initialize/document.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://brainstellar/./node_modules/micromark-util-subtokenize/index.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/content.js","webpack://brainstellar/./node_modules/micromark/lib/initialize/flow.js","webpack://brainstellar/./node_modules/micromark/lib/initialize/text.js","webpack://brainstellar/./node_modules/micromark-util-resolve-all/index.js","webpack://brainstellar/./node_modules/micromark/lib/create-tokenizer.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/list.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://brainstellar/./node_modules/micromark-factory-destination/index.js","webpack://brainstellar/./node_modules/micromark-factory-label/index.js","webpack://brainstellar/./node_modules/micromark-factory-title/index.js","webpack://brainstellar/./node_modules/micromark-factory-whitespace/index.js","webpack://brainstellar/./node_modules/micromark-util-normalize-identifier/index.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://brainstellar/./node_modules/micromark-util-html-tag-name/index.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://brainstellar/./node_modules/decode-named-character-reference/index.dom.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://brainstellar/./node_modules/micromark-util-classify-character/index.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://brainstellar/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://brainstellar/./node_modules/micromark/lib/constructs.js","webpack://brainstellar/./node_modules/micromark/lib/parse.js","webpack://brainstellar/./node_modules/micromark/lib/preprocess.js","webpack://brainstellar/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://brainstellar/./node_modules/micromark-util-decode-string/index.js","webpack://brainstellar/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://brainstellar/./node_modules/micromark/lib/postprocess.js","webpack://brainstellar/./node_modules/remark-parse/lib/index.js","webpack://brainstellar/./node_modules/micromark-util-sanitize-uri/index.js","webpack://brainstellar/./node_modules/unist-util-is/lib/index.js","webpack://brainstellar/./node_modules/unist-util-visit-parents/lib/index.js","webpack://brainstellar/./node_modules/unist-util-visit/lib/index.js","webpack://brainstellar/./node_modules/unist-util-position/lib/index.js","webpack://brainstellar/./node_modules/mdast-util-definitions/lib/index.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/revert.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://brainstellar/./node_modules/trim-lines/index.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/state.js","webpack://brainstellar/./node_modules/unist-util-generated/lib/index.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/index.js","webpack://brainstellar/./node_modules/mdast-util-to-hast/lib/footer.js","webpack://brainstellar/./node_modules/remark-rehype/lib/index.js","webpack://brainstellar/./node_modules/property-information/lib/util/schema.js","webpack://brainstellar/./node_modules/property-information/lib/util/merge.js","webpack://brainstellar/./node_modules/property-information/lib/normalize.js","webpack://brainstellar/./node_modules/property-information/lib/util/info.js","webpack://brainstellar/./node_modules/property-information/lib/util/types.js","webpack://brainstellar/./node_modules/property-information/lib/util/defined-info.js","webpack://brainstellar/./node_modules/property-information/lib/util/create.js","webpack://brainstellar/./node_modules/property-information/lib/xlink.js","webpack://brainstellar/./node_modules/property-information/lib/xml.js","webpack://brainstellar/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://brainstellar/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://brainstellar/./node_modules/property-information/lib/xmlns.js","webpack://brainstellar/./node_modules/property-information/lib/aria.js","webpack://brainstellar/./node_modules/property-information/lib/html.js","webpack://brainstellar/./node_modules/property-information/lib/svg.js","webpack://brainstellar/./node_modules/property-information/index.js","webpack://brainstellar/./node_modules/react-markdown/lib/rehype-filter.js","webpack://brainstellar/./node_modules/hast-util-whitespace/index.js","webpack://brainstellar/./node_modules/property-information/lib/find.js","webpack://brainstellar/./node_modules/property-information/lib/hast-to-react.js","webpack://brainstellar/./node_modules/space-separated-tokens/index.js","webpack://brainstellar/./node_modules/comma-separated-tokens/index.js","webpack://brainstellar/./node_modules/style-to-object/index.mjs","webpack://brainstellar/./node_modules/react-markdown/lib/uri-transformer.js","webpack://brainstellar/./node_modules/react-markdown/lib/ast-to-react.js","webpack://brainstellar/./node_modules/react-markdown/lib/react-markdown.js","webpack://brainstellar/./node_modules/micromark-extension-math/lib/math-flow.js","webpack://brainstellar/./node_modules/micromark-extension-math/lib/math-text.js","webpack://brainstellar/./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","webpack://brainstellar/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://brainstellar/./node_modules/mdast-util-to-markdown/lib/util/safe.js","webpack://brainstellar/./node_modules/mdast-util-math/lib/index.js","webpack://brainstellar/./node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://brainstellar/./node_modules/longest-streak/index.js","webpack://brainstellar/./node_modules/remark-math/index.js","webpack://brainstellar/./node_modules/micromark-extension-math/lib/syntax.js","webpack://brainstellar/./node_modules/hast-util-is-element/index.js","webpack://brainstellar/./node_modules/unist-util-find-after/lib/index.js","webpack://brainstellar/./node_modules/hast-util-to-text/lib/index.js","webpack://brainstellar/./node_modules/web-namespaces/index.js","webpack://brainstellar/./node_modules/hast-util-parse-selector/lib/index.js","webpack://brainstellar/./node_modules/hastscript/lib/core.js","webpack://brainstellar/./node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","webpack://brainstellar/./node_modules/hastscript/lib/svg.js","webpack://brainstellar/./node_modules/hastscript/lib/html.js","webpack://brainstellar/./node_modules/hast-util-from-dom/lib/index.js","webpack://brainstellar/./node_modules/hast-util-from-html-isomorphic/lib/browser.js","webpack://brainstellar/./node_modules/rehype-katex/index.js","webpack://brainstellar/./src/templates/puzzle.js","webpack://brainstellar/./node_modules/inline-style-parser/index.js","webpack://brainstellar/./node_modules/is-buffer/index.js","webpack://brainstellar/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","webpack://brainstellar/./node_modules/react-markdown/node_modules/react-is/index.js","webpack://brainstellar/./node_modules/style-to-object/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","\nimport React, { useState } from 'react';\n\n\nconst Button = ({ id, label, content, backgroundColor, onToggle }) => {\n  const [isHidden, setIsHidden] = useState(true);\n\n  const toggleContent = () => {\n    setIsHidden(!isHidden);\n    onToggle && onToggle(); // Call the onToggle prop if it exists\n  };\n\n  return (\n    <>\n      <div>\n        <button style={{ display: `inline-block` }} id={`${id}Button`} className={`push ${isHidden ? '' : 'pushed'}`} onClick={toggleContent}>{label}</button>\n        <div id={id} className={isHidden ? 'hidden' : 'unhidden'}>\n          <div className=\"around\" style={{ backgroundColor: backgroundColor }}>\n            {content}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Button;\n","import React, { useEffect, useState } from 'react';\nimport Button from '../components/Button';\n\nconst FacebookComments = ({ puzzleId }) => {\n  const [loadComments, setLoadComments] = useState(false);\n\n  useEffect(() => {\n    if (loadComments) {\n      if (window.FB) {\n        window.FB.XFBML.parse(); // Reload the comments plugin\n      } else {\n        window.fbAsyncInit = function () {\n          window.FB.init({\n            appId: '685807501512723',\n            cookie: true,\n            xfbml: true,\n            version: 'v12.0'\n          });\n        };\n        (function (d, s, id) {\n          var js, fjs = d.getElementsByTagName(s)[0];\n          if (d.getElementById(id)) { return; }\n          js = d.createElement(s); js.id = id;\n          js.src = \"https://connect.facebook.net/en_US/sdk.js\";\n          fjs.parentNode.insertBefore(js, fjs);\n        }(document, 'script', 'facebook-jssdk'));\n      }\n    }\n  }, [loadComments]);\n\n  if (!loadComments) {\n    return (\n      <Button\n        id={`comments${puzzleId}`}\n        label=\"Comments\"\n        onToggle={() => setLoadComments(true)}\n        backgroundColor={`white`}\n      />\n    );\n  }\n\n  const URL = `http://brainstellar.com/puzzles/${puzzleId}`\n  return (\n\n    <Button\n      id={`comments${puzzleId}`}\n      label=\"Comments\"\n      content={\n        <>\n          <div className=\"fb-like\" data-href={URL} data-layout=\"standard\" data-action=\"like\" data-size=\"small\" data-show-faces=\"true\" data-share=\"false\"></div>\n          <div className=\"fb-save\"\n            data-uri={URL}\n            data-size=\"small\">\n          </div>\n          <div>\n            <div className=\"fb-comments\" data-href={URL} data-width=\"\" data-numposts=\"5\"></div>\n          </div>\n        </>\n      }\n      onToggle={null}\n      backgroundColor={`white`}\n    />\n  );\n}\n\nexport default FacebookComments;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const mathFlow = {\n  tokenize: tokenizeMathFenced,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeMathFenced(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  const initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  return start\n\n  /**\n   * Start of math.\n   *\n   * ```markdown\n   * > | $$\n   *     ^\n   *   | \\frac{1}{2}\n   *   | $$\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('mathFlow')\n    effects.enter('mathFlowFence')\n    effects.enter('mathFlowFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | $$\n   *      ^\n   *   | \\frac{1}{2}\n   *   | $$\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 36) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    if (sizeOpen < 2) {\n      return nok(code)\n    }\n    effects.exit('mathFlowFenceSequence')\n    return factorySpace(effects, metaBefore, 'whitespace')(code)\n  }\n\n  /**\n   * In opening fence, before meta.\n   *\n   * ```markdown\n   * > | $$asciimath\n   *       ^\n   *   | x < y\n   *   | $$\n   * ```\n   *\n   * @type {State}\n   */\n\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return metaAfter(code)\n    }\n    effects.enter('mathFlowFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | $$asciimath\n   *        ^\n   *   | x < y\n   *   | $$\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('mathFlowFenceMeta')\n      return metaAfter(code)\n    }\n    if (code === 36) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * After meta.\n   *\n   * ```markdown\n   * > | $$\n   *       ^\n   *   | \\frac{1}{2}\n   *   | $$\n   * ```\n   *\n   * @type {State}\n   */\n  function metaAfter(code) {\n    // Guaranteed to be eol/eof.\n    effects.exit('mathFlowFence')\n    if (self.interrupt) {\n      return ok(code)\n    }\n    return effects.attempt(\n      nonLazyContinuation,\n      beforeNonLazyContinuation,\n      after\n    )(code)\n  }\n\n  /**\n   * After eol/eof in math, at a non-lazy closing fence or content.\n   *\n   * ```markdown\n   *   | $$\n   * > | \\frac{1}{2}\n   *     ^\n   * > | $$\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeNonLazyContinuation(code) {\n    return effects.attempt(\n      {\n        tokenize: tokenizeClosingFence,\n        partial: true\n      },\n      after,\n      contentStart\n    )(code)\n  }\n\n  /**\n   * Before math content, definitely not before a closing fence.\n   *\n   * ```markdown\n   *   | $$\n   * > | \\frac{1}{2}\n   *     ^\n   *   | $$\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return (\n      initialSize\n        ? factorySpace(\n            effects,\n            beforeContentChunk,\n            'linePrefix',\n            initialSize + 1\n          )\n        : beforeContentChunk\n    )(code)\n  }\n\n  /**\n   * Before math content, after optional prefix.\n   *\n   * ```markdown\n   *   | $$\n   * > | \\frac{1}{2}\n   *     ^\n   *   | $$\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyContinuation,\n        beforeNonLazyContinuation,\n        after\n      )(code)\n    }\n    effects.enter('mathFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In math content.\n   *\n   * ```markdown\n   *   | $$\n   * > | \\frac{1}{2}\n   *      ^\n   *   | $$\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('mathFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After math (ha!).\n   *\n   * ```markdown\n   *   | $$\n   *   | \\frac{1}{2}\n   * > | $$\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('mathFlow')\n    return ok(code)\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | $$\n     *   | \\frac{1}{2}\n     * > | $$\n     *     ^\n     * ```\n     */\n    return factorySpace(\n      effects,\n      beforeSequenceClose,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | $$\n     *   | \\frac{1}{2}\n     * > | $$\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      effects.enter('mathFlowFence')\n      effects.enter('mathFlowFenceSequence')\n      return sequenceClose(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | $$\n     *   | \\frac{1}{2}\n     * > | $$\n     *      ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === 36) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size < sizeOpen) {\n        return nok(code)\n      }\n      effects.exit('mathFlowFenceSequence')\n      return factorySpace(effects, afterSequenceClose, 'whitespace')(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | $$\n     *   | \\frac{1}{2}\n     * > | $$\n     *       ^\n     * ```\n     *\n     * @type {State}\n     */\n    function afterSequenceClose(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('mathFlowFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (code === null) {\n      return ok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [singleDollarTextMath=true]\n *   Whether to support math (text) with a single dollar.\n *   Single dollars work in Pandoc and many other places, but often interfere\n *   with “normal” dollars in text.\n *   If you turn this off, you can use two or more dollars for text math.\n\n */\n\n// To do: next major: clean spaces in HTML compiler.\n// This has to be coordinated together with `mdast-util-math`.\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * @param {Options | null | undefined} [options]\n * @returns {Construct}\n */\nexport function mathText(options) {\n  const options_ = options || {}\n  let single = options_.singleDollarTextMath\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    tokenize: tokenizeMathText,\n    resolve: resolveMathText,\n    previous\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeMathText(effects, ok, nok) {\n    const self = this\n    let sizeOpen = 0\n    /** @type {number} */\n    let size\n    /** @type {Token} */\n    let token\n    return start\n\n    /**\n     * Start of math (text).\n     *\n     * ```markdown\n     * > | $a$\n     *     ^\n     * > | \\$a$\n     *      ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      effects.enter('mathText')\n      effects.enter('mathTextSequence')\n      return sequenceOpen(code)\n    }\n\n    /**\n     * In opening sequence.\n     *\n     * ```markdown\n     * > | $a$\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n\n    function sequenceOpen(code) {\n      if (code === 36) {\n        effects.consume(code)\n        sizeOpen++\n        return sequenceOpen\n      }\n\n      // Not enough markers in the sequence.\n      if (sizeOpen < 2 && !single) {\n        return nok(code)\n      }\n      effects.exit('mathTextSequence')\n      return between(code)\n    }\n\n    /**\n     * Between something and something else.\n     *\n     * ```markdown\n     * > | $a$\n     *      ^^\n     * ```\n     *\n     * @type {State}\n     */\n    function between(code) {\n      if (code === null) {\n        return nok(code)\n      }\n      if (code === 36) {\n        token = effects.enter('mathTextSequence')\n        size = 0\n        return sequenceClose(code)\n      }\n\n      // Tabs don’t work, and virtual spaces don’t make sense.\n      if (code === 32) {\n        effects.enter('space')\n        effects.consume(code)\n        effects.exit('space')\n        return between\n      }\n      if (markdownLineEnding(code)) {\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return between\n      }\n\n      // Data.\n      effects.enter('mathTextData')\n      return data(code)\n    }\n\n    /**\n     * In data.\n     *\n     * ```markdown\n     * > | $a$\n     *      ^\n     * ```\n     *\n     * @type {State}\n     */\n    function data(code) {\n      if (\n        code === null ||\n        code === 32 ||\n        code === 36 ||\n        markdownLineEnding(code)\n      ) {\n        effects.exit('mathTextData')\n        return between(code)\n      }\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * In closing sequence.\n     *\n     * ```markdown\n     * > | `a`\n     *       ^\n     * ```\n     *\n     * @type {State}\n     */\n\n    function sequenceClose(code) {\n      // More.\n      if (code === 36) {\n        effects.consume(code)\n        size++\n        return sequenceClose\n      }\n\n      // Done!\n      if (size === sizeOpen) {\n        effects.exit('mathTextSequence')\n        effects.exit('mathText')\n        return ok(code)\n      }\n\n      // More or less accents: mark as data.\n      token.type = 'mathTextData'\n      return data(code)\n    }\n  }\n}\n\n/** @type {Resolver} */\nfunction resolveMathText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'mathTextData') {\n        // Then we have padding.\n        events[tailExitIndex][1].type = 'mathTextPadding'\n        events[headEnterIndex][1].type = 'mathTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'mathTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 36 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('../index.js').Math} Math\n * @typedef {import('../index.js').InlineMath} InlineMath\n *\n * @typedef ToOptions\n *   Configuration.\n * @property {boolean | null | undefined} [singleDollarTextMath=true]\n *   Whether to support math (text) with a single dollar.\n *\n *   Single dollars work in Pandoc and many other places, but often interfere\n *   with “normal” dollars in text.\n *   If you turn this off, you can still use two or more dollars for text math.\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\nimport {patternCompile} from 'mdast-util-to-markdown/lib/util/pattern-compile.js'\n\n/**\n * Create an extension for `mdast-util-from-markdown`.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function mathFromMarkdown() {\n  return {\n    enter: {\n      mathFlow: enterMathFlow,\n      mathFlowFenceMeta: enterMathFlowMeta,\n      mathText: enterMathText\n    },\n    exit: {\n      mathFlow: exitMathFlow,\n      mathFlowFence: exitMathFlowFence,\n      mathFlowFenceMeta: exitMathFlowMeta,\n      mathFlowValue: exitMathData,\n      mathText: exitMathText,\n      mathTextData: exitMathData\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMathFlow(token) {\n    this.enter(\n      {\n        type: 'math',\n        meta: null,\n        value: '',\n        data: {\n          hName: 'div',\n          hProperties: {className: ['math', 'math-display']},\n          hChildren: [{type: 'text', value: ''}]\n        }\n      },\n      token\n    )\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMathFlowMeta() {\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMathFlowMeta() {\n    const data = this.resume()\n    const node = /** @type {Math} */ (this.stack[this.stack.length - 1])\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMathFlowFence() {\n    // Exit if this is the closing fence.\n    if (this.getData('mathFlowInside')) return\n    this.buffer()\n    this.setData('mathFlowInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMathFlow(token) {\n    const data = this.resume().replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    const node = /** @type {Math} */ (this.exit(token))\n    node.value = data\n    // @ts-expect-error: we defined it.\n    node.data.hChildren[0].value = data\n    this.setData('mathFlowInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMathText(token) {\n    this.enter(\n      {\n        type: 'inlineMath',\n        value: '',\n        data: {\n          hName: 'span',\n          hProperties: {className: ['math', 'math-inline']},\n          hChildren: [{type: 'text', value: ''}]\n        }\n      },\n      token\n    )\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMathText(token) {\n    const data = this.resume()\n    const node = /** @type {Math} */ (this.exit(token))\n    node.value = data\n    // @ts-expect-error: we defined it.\n    node.data.hChildren[0].value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMathData(token) {\n    this.config.enter.data.call(this, token)\n    this.config.exit.data.call(this, token)\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown`.\n *\n * @param {ToOptions | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function mathToMarkdown(options) {\n  let single = (options || {}).singleDollarTextMath\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  inlineMath.peek = inlineMathPeek\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'mathFlowMeta'},\n      {character: '\\n', inConstruct: 'mathFlowMeta'},\n      {\n        character: '$',\n        after: single ? undefined : '\\\\$',\n        inConstruct: 'phrasing'\n      },\n      {character: '$', inConstruct: 'mathFlowMeta'},\n      {atBreak: true, character: '$', after: '\\\\$'}\n    ],\n    handlers: {math, inlineMath}\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Math} node\n   */\n  // To do: next major: rename `context` to state, `safeOptions` to info.\n  // Note: fixing this code? Please also fix the similar code for code:\n  // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/main/lib/handle/code.js>\n  function math(node, _, context, safeOptions) {\n    const raw = node.value || ''\n    const tracker = track(safeOptions)\n    const sequence = '$'.repeat(Math.max(longestStreak(raw, '$') + 1, 2))\n    const exit = context.enter('mathFlow')\n    let value = tracker.move(sequence)\n\n    if (node.meta) {\n      const subexit = context.enter('mathFlowMeta')\n      value += tracker.move(\n        safe(context, node.meta, {\n          before: value,\n          after: '\\n',\n          encode: ['$'],\n          ...tracker.current()\n        })\n      )\n      subexit()\n    }\n\n    value += tracker.move('\\n')\n\n    if (raw) {\n      value += tracker.move(raw + '\\n')\n    }\n\n    value += tracker.move(sequence)\n    exit()\n    return value\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineMath} node\n   */\n  // Note: fixing this code? Please also fix the similar code for inline code:\n  // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/main/lib/handle/inline-code.js>\n  //\n  // To do: next major: rename `context` to state.\n  // To do: next major: use `state` (`safe`, `track`, `patternCompile`).\n  function inlineMath(node, _, context) {\n    let value = node.value || ''\n    let size = 1\n\n    if (!single) size++\n\n    // If there is a single dollar sign on its own in the math, use a fence of\n    // two.\n    // If there are two in a row, use one.\n    while (\n      new RegExp('(^|[^$])' + '\\\\$'.repeat(size) + '([^$]|$)').test(value)\n    ) {\n      size++\n    }\n\n    const sequence = '$'.repeat(size)\n\n    // If this is not just spaces or eols (tabs don’t count), and either the\n    // first and last character are a space or eol, or the first or last\n    // character are dollar signs, then pad with spaces.\n    if (\n      // Contains non-space.\n      /[^ \\r\\n]/.test(value) &&\n      // Starts with space and ends with space.\n      ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) ||\n        // Starts or ends with dollar.\n        /^\\$|\\$$/.test(value))\n    ) {\n      value = ' ' + value + ' '\n    }\n\n    let index = -1\n\n    // We have a potential problem: certain characters after eols could result in\n    // blocks being seen.\n    // For example, if someone injected the string `'\\n# b'`, then that would\n    // result in an ATX heading.\n    // We can’t escape characters in `inlineMath`, but because eols are\n    // transformed to spaces when going from markdown to HTML anyway, we can swap\n    // them out.\n    while (++index < context.unsafe.length) {\n      const pattern = context.unsafe[index]\n      const expression = patternCompile(pattern)\n      /** @type {RegExpExecArray | null} */\n      let match\n\n      // Only look for `atBreak`s.\n      // Btw: note that `atBreak` patterns will always start the regex at LF or\n      // CR.\n      if (!pattern.atBreak) continue\n\n      while ((match = expression.exec(value))) {\n        let position = match.index\n\n        // Support CRLF (patterns only look for one of the characters).\n        if (\n          value.codePointAt(position) === 10 /* `\\n` */ &&\n          value.codePointAt(position - 1) === 13 /* `\\r` */\n        ) {\n          position--\n        }\n\n        value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n      }\n    }\n\n    return sequence + value + sequence\n  }\n\n  /**\n   * @returns {string}\n   */\n  function inlineMathPeek() {\n    return '$'\n  }\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-math').ToOptions} Options\n *\n * @typedef {import('mdast-util-math')} DoNotTouchAsThisImportIncludesMathInTree\n */\n\nimport {math} from 'micromark-extension-math'\nimport {mathFromMarkdown, mathToMarkdown} from 'mdast-util-math'\n\n/**\n * Plugin to support math.\n *\n * @type {import('unified').Plugin<[Options?] | void[], Root, Root>}\n */\nexport default function remarkMath(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', math(options))\n  add('fromMarkdownExtensions', mathFromMarkdown())\n  add('toMarkdownExtensions', mathToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('./math-text.js').Options} Options\n */\n\nimport {mathFlow} from './math-flow.js'\nimport {mathText} from './math-text.js'\n\n/**\n * Create an extension for `micromark` to enable math syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable math syntax.\n */\nexport function math(options) {\n  return {\n    flow: {\n      [36]: mathFlow\n    },\n    text: {\n      [36]: mathText(options)\n    }\n  }\n}\n","/**\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('hast').Element} Element\n */\n\n/**\n * @typedef {null | undefined | string | TestFunctionAnything | Array<string | TestFunctionAnything>} Test\n *   Check for an arbitrary element, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if an element passes a test, unaware of TypeScript inferral.\n * @param {Element} element\n *   An element.\n * @param {number | null | undefined} [index]\n *   The element’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The element’s parent.\n * @returns {boolean | void}\n *   Whether this element passes the test.\n */\n\n/**\n * @template {Element} T\n *   Element type.\n * @typedef {T['tagName'] | TestFunctionPredicate<T> | Array<T['tagName'] | TestFunctionPredicate<T>>} PredicateTest\n *   Check for an element that can be inferred by TypeScript.\n */\n\n/**\n * Check if an element passes a certain node test.\n *\n * @template {Element} T\n *   Element type.\n * @callback TestFunctionPredicate\n *   Complex test function for an element that can be inferred by TypeScript.\n * @param {Element} element\n *   An element.\n * @param {number | null | undefined} [index]\n *   The element’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The element’s parent.\n * @returns {element is T}\n *   Whether this element passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is an element, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is an element and passes a test.\n */\n\n/**\n * Check if a node is an element and passes a certain node test\n *\n * @template {Element} T\n *   Element type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific element, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is T}\n *   Whether this is an element and passes a test.\n */\n\n/**\n * Check if `node` is an `Element` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific element.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is an element and passes a test.\n */\nexport const isElement =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &\n   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test | undefined} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index for child node')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      // @ts-expect-error Looks like a node.\n      if (!node || !node.type || typeof node.type !== 'string') {\n        return false\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return check.call(context, node, index, parent)\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *  When nullish, checks if `node` is an `Element`.\n *   *  When `string`, works like passing `(element) => element.tagName === test`.\n *   *  When `function` checks if function passed the element is true.\n *   *  When `array`, checks any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convertElement =\n  /**\n   * @type {(\n   *   (<T extends Element>(test: T['tagName'] | TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test | null | undefined} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as test')\n    }\n  )\n\n/**\n * Handle multiple tests.\n *\n * @param {Array<string | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn a string into a test for an element with a certain tag name.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction tagNameFactory(check) {\n  return tagName\n\n  /**\n   * @param {unknown} node\n   * @returns {boolean}\n   */\n  function tagName(node) {\n    return element(node) && node.tagName === check\n  }\n}\n\n/**\n * Turn a custom test into a test for an element that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    // @ts-expect-error: fine.\n    return element(node) && Boolean(check.call(this, node, ...parameters))\n  }\n}\n\n/**\n * Make sure something is an element.\n *\n * @param {unknown} node\n * @returns {node is Element}\n */\nfunction element(node) {\n  return Boolean(\n    node &&\n      typeof node === 'object' &&\n      // @ts-expect-error Looks like a node.\n      node.type === 'element' &&\n      // @ts-expect-error Looks like an element.\n      typeof node.tagName === 'string'\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Find the first node in `parent` after another `node` or after an index,\n * that passes `test`.\n\n * @param parent\n *   Parent node.\n * @param index\n *   Child of `parent` or it’s index.\n * @param test\n *   `unist-util-is`-compatible test.\n * @returns\n *   Child of `parent` or `null`.\n */\nexport const findAfter =\n  /**\n   * @type {(\n   *  (<T extends Node>(node: Parent, index: Node | number, test: import('unist-util-is').PredicateTest<T>) => T | null) &\n   *  ((node: Parent, index: Node | number, test?: Test) => Node | null)\n   * )}\n   */\n  (\n    /**\n     * @param {Parent} parent\n     * @param {Node | number} index\n     * @param {Test} [test]\n     * @returns {Node | null}\n     */\n    function (parent, index, test) {\n      const is = convert(test)\n\n      if (!parent || !parent.type || !parent.children) {\n        throw new Error('Expected parent node')\n      }\n\n      if (typeof index === 'number') {\n        if (index < 0 || index === Number.POSITIVE_INFINITY) {\n          throw new Error('Expected positive finite number as index')\n        }\n      } else {\n        index = parent.children.indexOf(index)\n\n        if (index < 0) {\n          throw new Error('Expected child node or index')\n        }\n      }\n\n      while (++index < parent.children.length) {\n        if (is(parent.children[index], index, parent)) {\n          return parent.children[index]\n        }\n      }\n\n      return null\n    }\n  )\n","/**\n * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n */\n\n/**\n * @typedef {Content | Root} Node\n *   Any node.\n * @typedef {Extract<Node, import('unist').Parent>} Parent\n *   Any parent.\n * @typedef {'normal' | 'pre' | 'nowrap' | 'pre-wrap'} Whitespace\n *   Valid and useful whitespace values (from CSS).\n * @typedef {0 | 1 | 2} BreakNumber\n *   Specific break:\n *\n *   *   `0` — space\n *   *   `1` — line ending\n *   *   `2` — blank line\n * @typedef {'\\n'} BreakForce\n *   Forced break.\n * @typedef {boolean} BreakValue\n *   Whether there was a break.\n * @typedef {BreakValue | BreakNumber | undefined} BreakBefore\n *   Any value for a break before.\n * @typedef {BreakValue | BreakNumber | BreakForce | undefined} BreakAfter\n *   Any value for a break after.\n *\n * @typedef CollectionInfo\n *   Info on current collection.\n * @property {Whitespace} whitespace\n *   Current whitespace setting.\n * @property {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @property {BreakAfter} breakAfter\n *   Whether there was a break after.\n *\n * @typedef Options\n *   Configuration.\n * @property {Whitespace | null | undefined} [whitespace='normal']\n *   Initial CSS whitespace setting to use.\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {findAfter} from 'unist-util-find-after'\n\nconst searchLineFeeds = /\\n/g\nconst searchTabOrSpaces = /[\\t ]+/g\n\nconst br = convertElement('br')\nconst p = convertElement('p')\nconst cell = convertElement(['th', 'td'])\nconst row = convertElement('tr')\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nconst notRendered = convertElement([\n  // List from: <https://html.spec.whatwg.org/#hidden-elements>\n  'datalist',\n  'head',\n  'noembed',\n  'noframes',\n  'noscript', // Act as if we support scripting.\n  'rp',\n  'script',\n  'style',\n  'template',\n  'title',\n  // Hidden attribute.\n  hidden,\n  // From: <https://html.spec.whatwg.org/#flow-content-3>\n  closedDialog\n])\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nconst blockOrCaption = convertElement([\n  'address', // Flow content\n  'article', // Sections and headings\n  'aside', // Sections and headings\n  'blockquote', // Flow content\n  'body', // Page\n  'caption', // `table-caption`\n  'center', // Flow content (legacy)\n  'dd', // Lists\n  'dialog', // Flow content\n  'dir', // Lists (legacy)\n  'dl', // Lists\n  'dt', // Lists\n  'div', // Flow content\n  'figure', // Flow content\n  'figcaption', // Flow content\n  'footer', // Flow content\n  'form,', // Flow content\n  'h1', // Sections and headings\n  'h2', // Sections and headings\n  'h3', // Sections and headings\n  'h4', // Sections and headings\n  'h5', // Sections and headings\n  'h6', // Sections and headings\n  'header', // Flow content\n  'hgroup', // Sections and headings\n  'hr', // Flow content\n  'html', // Page\n  'legend', // Flow content\n  'listing', // Flow content (legacy)\n  'main', // Flow content\n  'menu', // Lists\n  'nav', // Sections and headings\n  'ol', // Lists\n  'p', // Flow content\n  'plaintext', // Flow content (legacy)\n  'pre', // Flow content\n  'section', // Sections and headings\n  'ul', // Lists\n  'xmp' // Flow content (legacy)\n])\n\n/**\n * Get the plain-text value of a node.\n *\n * ###### Algorithm\n *\n * *   if `tree` is a comment, returns its `value`\n * *   if `tree` is a text, applies normal whitespace collapsing to its\n *     `value`, as defined by the CSS Text spec\n * *   if `tree` is a root or element, applies an algorithm similar to the\n *     `innerText` getter as defined by HTML\n *\n * ###### Notes\n *\n * > 👉 **Note**: the algorithm acts as if `tree` is being rendered, and as if\n * > we’re a CSS-supporting user agent, with scripting enabled.\n *\n * *   if `tree` is an element that is not displayed (such as a `head`), we’ll\n *     still use the `innerText` algorithm instead of switching to `textContent`\n * *   if descendants of `tree` are elements that are not displayed, they are\n *     ignored\n * *   CSS is not considered, except for the default user agent style sheet\n * *   a line feed is collapsed instead of ignored in cases where Fullwidth, Wide,\n *     or Halfwidth East Asian Width characters are used, the same goes for a case\n *     with Chinese, Japanese, or Yi writing systems\n * *   replaced elements (such as `audio`) are treated like non-replaced elements\n *\n * @param {Node} tree\n *   Tree to turn into text.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `tree`.\n */\nexport function toText(tree, options = {}) {\n  const children = 'children' in tree ? tree.children : []\n  const block = blockOrCaption(tree)\n  const whitespace = inferWhitespace(tree, {\n    whitespace: options.whitespace || 'normal',\n    breakBefore: false,\n    breakAfter: false\n  })\n\n  /** @type {Array<string | BreakNumber>} */\n  const results = []\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (tree.type === 'text' || tree.type === 'comment') {\n    results.push(\n      ...collectText(tree, {\n        whitespace,\n        breakBefore: true,\n        breakAfter: true\n      })\n    )\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  let index = -1\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results.push(\n      // @ts-expect-error Looks like a parent.\n      ...innerTextCollection(children[index], tree, {\n        whitespace,\n        breakBefore: index ? undefined : block,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : block\n      })\n    )\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {number | undefined} */\n  let count\n\n  index = -1\n\n  while (++index < results.length) {\n    const value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value\n    } else if (value) {\n      if (count !== undefined && count > -1) {\n        result.push('\\n'.repeat(count) || ' ')\n      }\n\n      count = -1\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n/**\n * <https://html.spec.whatwg.org/#inner-text-collection-steps>\n *\n * @param {Node} node\n * @param {Parent} parent\n * @param {CollectionInfo} info\n * @returns {Array<string | BreakNumber>}\n */\nfunction innerTextCollection(node, parent, info) {\n  if (node.type === 'element') {\n    return collectElement(node, parent, info)\n  }\n\n  if (node.type === 'text') {\n    return info.whitespace === 'normal'\n      ? collectText(node, info)\n      : collectPreText(node)\n  }\n\n  return []\n}\n\n/**\n * Collect an element.\n *\n * @param {Element} node\n *   Element node.\n * @param {Parent} parent\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<string | BreakNumber>}\n */\nfunction collectElement(node, parent, info) {\n  // First we infer the `white-space` property.\n  const whitespace = inferWhitespace(node, info)\n  const children = node.children || []\n  let index = -1\n  /** @type {Array<string | BreakNumber>} */\n  let items = []\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  /** @type {BreakNumber | undefined} */\n  let prefix\n  /** @type {BreakNumber | BreakForce | undefined} */\n  let suffix\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n'\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (row(node) && findAfter(parent, node, row)) {\n    suffix = '\\n'\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(\n      innerTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? undefined : prefix,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : suffix\n      })\n    )\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  if (cell(node) && findAfter(parent, node, cell)) {\n    items.push('\\t')\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix)\n  if (suffix) items.push(suffix)\n\n  return items\n}\n\n/**\n * 4.  If node is a Text node, then for each CSS text box produced by node,\n *     in content order, compute the text of the box after application of the\n *     CSS `white-space` processing rules and `text-transform` rules, set\n *     items to the list of the resulting strings, and return items.\n *     The CSS `white-space` processing rules are slightly modified:\n *     collapsible spaces at the end of lines are always collapsed, but they\n *     are only removed if the line is the last line of the block, or it ends\n *     with a br element.\n *     Soft hyphens should be preserved.\n *\n *     Note: See `collectText` and `collectPreText`.\n *     Note: we don’t deal with `text-transform`, no element has that by\n *     default.\n *\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\n *\n * @param {Text | Comment} node\n *   Text node.\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<string | BreakNumber>}\n *   Result.\n */\nfunction collectText(node, info) {\n  const value = String(node.value)\n  /** @type {Array<string>} */\n  const lines = []\n  /** @type {Array<string | BreakNumber>} */\n  const result = []\n  let start = 0\n\n  while (start <= value.length) {\n    searchLineFeeds.lastIndex = start\n\n    const match = searchLineFeeds.exec(value)\n    const end = match && 'index' in match ? match.index : value.length\n\n    lines.push(\n      // Any sequence of collapsible spaces and tabs immediately preceding or\n      // following a segment break is removed.\n      trimAndCollapseSpacesAndTabs(\n        // […] ignoring bidi formatting characters (characters with the\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n        // they were not there.\n        value\n          .slice(start, end)\n          .replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''),\n        start === 0 ? info.breakBefore : true,\n        end === value.length ? info.breakAfter : true\n      )\n    )\n\n    start = end + 1\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  let index = -1\n  /** @type {BreakNumber | undefined} */\n  let join\n\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||\n      (index < lines.length - 1 &&\n        lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */\n    ) {\n      result.push(lines[index])\n      join = undefined\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (typeof join === 'number') result.push(join)\n      result.push(lines[index])\n      join = 0\n    } else if (index === 0 || index === lines.length - 1) {\n      // If this line is empty, and it’s the first or last, add a space.\n      // Note that this function is only called in normal whitespace, so we\n      // don’t worry about `pre`.\n      result.push(0)\n    }\n  }\n\n  return result\n}\n\n/**\n * Collect a text node as “pre” whitespace.\n *\n * @param {Text} node\n *   Text node.\n * @returns {Array<string | BreakNumber>}\n *   Result.\n */\nfunction collectPreText(node) {\n  return [String(node.value)]\n}\n\n/**\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n * 4.  Any collapsible space immediately following another collapsible\n *     space—even one outside the boundary of the inline containing that\n *     space, provided both spaces are within the same inline formatting\n *     context—is collapsed to have zero advance width. (It is invisible,\n *     but retains its soft wrap opportunity, if any.)\n *\n * @param {string} value\n *   Value to collapse.\n * @param {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @param {BreakAfter} breakAfter\n *   Whether there was a break after.\n * @returns {string}\n *   Result.\n */\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  /** @type {number | undefined} */\n  let end\n\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start\n    const match = searchTabOrSpaces.exec(value)\n    end = match ? match.index : value.length\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('')\n    }\n\n    if (start !== end) {\n      result.push(value.slice(start, end))\n    }\n\n    start = match ? end + match[0].length : end\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  if (start !== end && !breakAfter) {\n    result.push('')\n  }\n\n  return result.join(' ')\n}\n\n/**\n * Figure out the whitespace of a node.\n *\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\n *\n * @param {Node} node\n *   Node (typically `Element`).\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Whitespace}\n *   Applied whitespace.\n */\nfunction inferWhitespace(node, info) {\n  if (node.type === 'element') {\n    const props = node.properties || {}\n    switch (node.tagName) {\n      case 'listing':\n      case 'plaintext':\n      case 'xmp': {\n        return 'pre'\n      }\n\n      case 'nobr': {\n        return 'nowrap'\n      }\n\n      case 'pre': {\n        return props.wrap ? 'pre-wrap' : 'pre'\n      }\n\n      case 'td':\n      case 'th': {\n        return props.noWrap ? 'nowrap' : info.whitespace\n      }\n\n      case 'textarea': {\n        return 'pre-wrap'\n      }\n\n      default:\n    }\n  }\n\n  return info.whitespace\n}\n\n/** @type {TestFunctionAnything} */\nfunction hidden(node) {\n  return Boolean((node.properties || {}).hidden)\n}\n\n/** @type {TestFunctionAnything} */\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open\n}\n","/**\n * Map of web namespaces.\n *\n * @type {Record<string, string>}\n */\nexport const webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name.\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector.\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: fine.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Content | Root} Node\n *   Any concrete `hast` node.\n * @typedef {Root | Element} HResult\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {string | number} HStyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, HStyleValue>} HStyle\n *   Supported value of a `style` prop.\n * @typedef {string | number | boolean | null | undefined} HPrimitiveValue\n *   Primitive property value.\n * @typedef {Array<string | number>} HArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {HPrimitiveValue | HArrayValue} HPropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: HPropertyValue | HStyle}} HProperties\n *   Acceptable value for element properties.\n *\n * @typedef {string | number | null | undefined} HPrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<Node | HPrimitiveChild>} HArrayChild\n *   List of children.\n * @typedef {Node | HPrimitiveChild | HArrayChild} HChild\n *   Acceptable child value.\n */\n\nimport {find, normalize} from 'property-information'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {parse as spaces} from 'space-separated-tokens'\nimport {parse as commas} from 'comma-separated-tokens'\n\nconst buttonTypes = new Set(['menu', 'submit', 'reset', 'button'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n * @param {string} defaultTagName\n * @param {Array<string>} [caseSensitive]\n */\nexport function core(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  const h =\n    /**\n     * @type {{\n     *   (): Root\n     *   (selector: null | undefined, ...children: Array<HChild>): Root\n     *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element\n     *   (selector: string, ...children: Array<HChild>): Element\n     * }}\n     */\n    (\n      /**\n       * Hyperscript compatible DSL for creating virtual hast trees.\n       *\n       * @param {string | null} [selector]\n       * @param {HProperties | HChild} [properties]\n       * @param {Array<HChild>} children\n       * @returns {HResult}\n       */\n      function (selector, properties, ...children) {\n        let index = -1\n        /** @type {HResult} */\n        let node\n\n        if (selector === undefined || selector === null) {\n          node = {type: 'root', children: []}\n          // @ts-expect-error Properties are not supported for roots.\n          children.unshift(properties)\n        } else {\n          node = parseSelector(selector, defaultTagName)\n          // Normalize the name.\n          node.tagName = node.tagName.toLowerCase()\n          if (adjust && own.call(adjust, node.tagName)) {\n            node.tagName = adjust[node.tagName]\n          }\n\n          // Handle props.\n          if (isProperties(properties, node.tagName)) {\n            /** @type {string} */\n            let key\n\n            for (key in properties) {\n              if (own.call(properties, key)) {\n                // @ts-expect-error `node.properties` is set.\n                addProperty(schema, node.properties, key, properties[key])\n              }\n            }\n          } else {\n            children.unshift(properties)\n          }\n        }\n\n        // Handle children.\n        while (++index < children.length) {\n          addChild(node.children, children[index])\n        }\n\n        if (node.type === 'element' && node.tagName === 'template') {\n          node.content = {type: 'root', children: node.children}\n          node.children = []\n        }\n\n        return node\n      }\n    )\n\n  return h\n}\n\n/**\n * @param {HProperties | HChild} value\n * @param {string} name\n * @returns {value is HProperties}\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n * @param {Properties} properties\n * @param {string} key\n * @param {HStyle | HPropertyValue} value\n * @returns {void}\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {HPropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<string | number>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // @ts-expect-error Assume no booleans in array.\n      finalResult[index] = parsePrimitive(info, info.property, result[index])\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // @ts-expect-error Assume no booleans in `className`.\n    result = properties.className.concat(result)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<Content>} nodes\n * @param {HChild} value\n * @returns {void}\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n * @param {string} name\n * @param {HPrimitiveValue} value\n * @returns {HPrimitiveValue}\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {HStyle} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n */\n\nimport {svg} from 'property-information'\nimport {core} from './core.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\nexport const s = core(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n */\n\nimport {html} from 'property-information'\nimport {core} from './core.js'\n\nexport const h = core(html, 'div')\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').DocType} HastDoctype\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('hast').Comment} HastComment\n * @typedef {import('hast').Content} HastContent\n */\n\n/**\n * @typedef {HastContent | HastRoot} HastNode\n *\n * @callback AfterTransform\n *   Callback called when each node is transformed.\n * @param {Node} domNode\n *   DOM node that was handled.\n * @param {HastNode} hastNode\n *   Corresponding hast node.\n * @returns {void}\n *   Nothing.\n *\n * @typedef Options\n *   Configuration.\n * @property {AfterTransform | null | undefined} [afterTransform]\n *   Callback called when each node is transformed.\n */\n\nimport {webNamespaces} from 'web-namespaces'\nimport {h, s} from 'hastscript'\n\n/**\n * Transform a DOM tree to a hast tree.\n *\n * @param {Node} tree\n *   DOM tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNode}\n *   Equivalent hast node.\n */\nexport function fromDom(tree, options) {\n  const result = tree ? transform(tree, options || {}) : undefined\n  return result || {type: 'root', children: []}\n}\n\n/**\n * @param {Node} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastNode | undefined}\n *   Equivalent hast node.\n *\n *   Note that certain legacy DOM nodes (i.e., Attr nodes (2),  CDATA, processing instructions)\n */\nfunction transform(node, options) {\n  const transformed = one(node, options)\n  if (transformed && options.afterTransform)\n    options.afterTransform(node, transformed)\n  return transformed\n}\n\n/**\n * @param {Node} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastNode | undefined}\n *   Equivalent hast node.\n */\nfunction one(node, options) {\n  switch (node.nodeType) {\n    case 1 /* Element */: {\n      // @ts-expect-error TypeScript is wrong.\n      return element(node, options)\n    }\n\n    // Ignore: Attr (2).\n\n    case 3 /* Text */: {\n      // @ts-expect-error TypeScript is wrong.\n      return text(node)\n    }\n\n    // Ignore: CDATA (4).\n    // Removed: Entity reference (5)\n    // Removed: Entity (6)\n    // Ignore: Processing instruction (7).\n\n    case 8 /* Comment */: {\n      // @ts-expect-error TypeScript is wrong.\n      return comment(node)\n    }\n\n    case 9 /* Document */: {\n      // @ts-expect-error TypeScript is wrong.\n      return root(node, options)\n    }\n\n    case 10 /* Document type */: {\n      return doctype()\n    }\n\n    case 11 /* Document fragment */: {\n      // @ts-expect-error TypeScript is wrong.\n      return root(node, options)\n    }\n\n    default: {\n      return undefined\n    }\n  }\n}\n\n/**\n * Transform a document.\n *\n * @param {Document | DocumentFragment} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastRoot}\n *   Equivalent hast node.\n */\nfunction root(node, options) {\n  return {type: 'root', children: all(node, options)}\n}\n\n/**\n * Transform a doctype.\n *\n * @returns {HastDoctype}\n *   Equivalent hast node.\n */\nfunction doctype() {\n  // @ts-expect-error hast types out of date.\n  return {type: 'doctype'}\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   DOM node to transform.\n * @returns {HastText}\n *   Equivalent hast node.\n */\nfunction text(node) {\n  return {type: 'text', value: node.nodeValue || ''}\n}\n\n/**\n * Transform a comment.\n *\n * @param {Comment} node\n *   DOM node to transform.\n * @returns {HastComment}\n *   Equivalent hast node.\n */\nfunction comment(node) {\n  return {type: 'comment', value: node.nodeValue || ''}\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastElement}\n *   Equivalent hast node.\n */\nfunction element(node, options) {\n  const space = node.namespaceURI\n  const fn = space === webNamespaces.svg ? s : h\n  const tagName =\n    space === webNamespaces.html ? node.tagName.toLowerCase() : node.tagName\n  /** @type {DocumentFragment | Element} */\n  const content =\n    // @ts-expect-error Types are wrong.\n    space === webNamespaces.html && tagName === 'template' ? node.content : node\n  const attributes = node.getAttributeNames()\n  /** @type {Record<string, string>} */\n  const props = {}\n  let index = -1\n\n  while (++index < attributes.length) {\n    props[attributes[index]] = node.getAttribute(attributes[index]) || ''\n  }\n\n  return fn(tagName, props, all(content, options))\n}\n\n/**\n * Transform child nodes in a parent.\n *\n * @param {Document | DocumentFragment | Element} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {Array<HastContent>}\n *   Equivalent hast nodes.\n */\nfunction all(node, options) {\n  const nodes = node.childNodes\n  /** @type {Array<HastContent>} */\n  const children = []\n  let index = -1\n\n  while (++index < nodes.length) {\n    const child = transform(nodes[index], options)\n\n    if (child !== undefined) {\n      // @ts-expect-error Assume no document inside document.\n      children.push(child)\n    }\n  }\n\n  return children\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {typeof import('./index.js').fromHtmlIsomorphic} FromHtmlIsomorphic\n */\n\nimport {fromDom} from 'hast-util-from-dom'\n\nconst parser = new DOMParser()\n\n/** @type {FromHtmlIsomorphic} */\nexport function fromHtmlIsomorphic(value, options) {\n  const node = options?.fragment\n    ? parseFragment(value)\n    : parser.parseFromString(value, 'text/html')\n\n  return /** @type {Root} */ (fromDom(node))\n}\n\n/**\n * Parse as a fragment.\n *\n * @param {string} value\n * @returns {DocumentFragment}\n */\nfunction parseFragment(value) {\n  const template = document.createElement('template')\n  template.innerHTML = value\n  return template.content\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('katex').KatexOptions} Options\n */\n\nimport katex from 'katex'\nimport {visit} from 'unist-util-visit'\nimport {toText} from 'hast-util-to-text'\nimport {fromHtmlIsomorphic} from 'hast-util-from-html-isomorphic'\n\nconst assign = Object.assign\n\nconst source = 'rehype-katex'\n\n/**\n * Plugin to transform `<span class=math-inline>` and `<div class=math-display>`\n * with KaTeX.\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function rehypeKatex(options) {\n  const settings = options || {}\n  const throwOnError = settings.throwOnError || false\n\n  return (tree, file) => {\n    visit(tree, 'element', (element) => {\n      const classes =\n        element.properties && Array.isArray(element.properties.className)\n          ? element.properties.className\n          : []\n      const inline = classes.includes('math-inline')\n      const displayMode = classes.includes('math-display')\n\n      if (!inline && !displayMode) {\n        return\n      }\n\n      const value = toText(element, {whitespace: 'pre'})\n\n      /** @type {string} */\n      let result\n\n      try {\n        result = katex.renderToString(\n          value,\n          assign({}, settings, {displayMode, throwOnError: true})\n        )\n      } catch (error_) {\n        const error = /** @type {Error} */ (error_)\n        const fn = throwOnError ? 'fail' : 'message'\n        const origin = [source, error.name.toLowerCase()].join(':')\n\n        file[fn](error.message, element.position, origin)\n\n        // KaTeX can handle `ParseError` itself, but not others.\n        // Generate similar markup if this is an other error.\n        // See: <https://github.com/KaTeX/KaTeX/blob/5dc7af0/docs/error.md>.\n        if (error.name !== 'ParseError') {\n          element.children = [\n            {\n              type: 'element',\n              tagName: 'span',\n              properties: {\n                className: ['katex-error'],\n                title: String(error),\n                style: 'color:' + (settings.errorColor || '#cc0000')\n              },\n              children: [{type: 'text', value}]\n            }\n          ]\n          return\n        }\n\n        result = katex.renderToString(\n          value,\n          assign({}, settings, {\n            displayMode,\n            throwOnError: false,\n            strict: 'ignore'\n          })\n        )\n      }\n\n      const root = fromHtmlIsomorphic(result, {fragment: true})\n      // @ts-expect-error: assume no `doctypes` in KaTeX result.\n      element.children = root.children\n    })\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport { graphql, Link } from 'gatsby'\nimport Layout from '../components/layout'\nimport { Helmet } from \"react-helmet\";\nimport Button from '../components/Button';\nimport FacebookComments from '../components/FacebookComments';\n\nimport ReactMarkdown from 'react-markdown'\nimport remarkMath from 'remark-math'\nimport rehypeKatex from 'rehype-katex'\nimport 'katex/dist/katex.min.css'; // important: this styles the math output\n\n\n\nconst ComponentToDisplayMarkdown = ({ markdown }) => (\n  <ReactMarkdown\n    children={markdown}\n    remarkPlugins={[remarkMath]}\n    rehypePlugins={[rehypeKatex]}\n  />\n);\n\n\n\n\n\nexport const query = graphql`\n  query($puzzleId: Int!) {\n    puzzlesYaml(puzzleId: { eq: $puzzleId }) {\n      puzzleId\n      difficulty\n      category\n      title\n      question\n      questionImage\n      hint\n      answer\n      solution\n      solutionImage\n    }\n  }\n`\n\n\n\nexport default function Puzzle({ data, pageContext }) {\n  const puzzle = data.puzzlesYaml\n  const { previousPuzzleRoute, nextPuzzleRoute, category, difficulty } = pageContext\n\n  useEffect(() => {\n    document.querySelectorAll('.push').forEach(button => {\n      button.addEventListener('click', function () {\n        console.log({ id: this.id });\n        const content = document.getElementById(this.id.replace('Button', ''))\n        if (content) {\n          const isHidden = content.classList.contains('hidden')\n          content.classList.toggle('hidden', !isHidden)\n          content.classList.toggle('unhidden', isHidden)\n          this.classList.toggle('pushed', isHidden)\n          this.classList.toggle('push', !isHidden)\n        }\n      })\n    })\n\n  }, [])\n\n\n\n\n  return (\n    <Layout>\n      <Helmet>\n        <link rel=\"icon\" href=\"/favicon.gif\" />\n        <title>{puzzle.title} | Brainstellar Puzzles</title>\n      </Helmet>\n      <div className=\"stylishpage\"><div className=\"bord1\"><div className=\"bord2\"><div className=\"container\">\n        {category && <h2 style={{ textAlign: `center`, marginTop: `1.5em`, marginBottom: `1em` }}>{category} puzzles</h2>}\n\n        {difficulty && <h2 style={{ textAlign: `center`, marginTop: `1.5em`, marginBottom: `1em` }}>{difficulty} puzzles</h2>}\n\n\n        <br /><br />\n\n        <table style={{ border: '0px solid black', width: '100%', padding: '0px', margin: '0px' }}>\n          <tbody>\n            <tr style={{ padding: '0px', margin: '0px' }}>\n              <td style={{ padding: '0px', margin: '0px', border: '0px solid black', width: '20%', text: '' }}>\n                <Link className={`btn  btn-sm btn-${puzzle.difficulty} smooth`} to={`/puzzles/${puzzle.difficulty}`} title={`More ${puzzle.difficulty} puzzles`}>{puzzle.difficulty}</Link>\n              </td>\n              <td style={{ padding: '0px', margin: '0px' }}>\n                <div className=\"content-text\" style={{ padding: '0px', margin: '0px', textAlign: 'center', fontSize: '1.3em' }}>\n                  <a href={`/puzzles/${puzzle.puzzleId}`} title=\"Permanent link to this post\">\n                    {puzzle.title}\n                  </a>\n                </div>\n              </td>\n              <td style={{ padding: '0px', margin: '0px', border: '0px solid black', width: '20%', maxWidth: '80px', textAlign: 'right' }}>\n                <Link className={`btn  btn-sm link-white smooth`} to={`/puzzles/${puzzle.category}`} title={`More ${puzzle.category} puzzles`}>{puzzle.category}</Link>\n\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        {puzzle.question && <div className=\"content-text\" style={{ marginTop: `1em`, marginBottom: `1em` }}>\n          <ComponentToDisplayMarkdown markdown={puzzle.question} />\n        </div>}\n\n        {puzzle.questionImage && <img src={`/puzzle-images/${puzzle.questionImage}`} style={{ width: `200px`, height: 'auto', display: 'block', 'marginLeft': 'auto', 'marginRight': 'auto' }} alt={`QuestionImage ${puzzle.puzzleId}`} />}\n\n        {puzzle.hint &&\n          <Button id={`hint${puzzle.puzzleId}`} label=\"Hint\" content={\n            <span className=\"one-liner\"><ComponentToDisplayMarkdown markdown={puzzle.hint} /></span>\n          } />\n        }\n\n        {puzzle.answer &&\n          <Button id={`answer${puzzle.puzzleId}`} label=\"Answer\" content={\n            <span className=\"one-liner\"><ComponentToDisplayMarkdown markdown={puzzle.answer} /></span>\n          } />\n        }\n\n        {puzzle.solution &&\n          <Button id={`solution${puzzle.puzzleId}`} label=\"Solution\" content={\n            <>\n              <ComponentToDisplayMarkdown markdown={puzzle.solution} />\n              {puzzle.solutionImage &&\n                <img src={`/puzzle-images/${puzzle.solutionImage}`} style={{ width: `200px`, height: 'auto', display: 'block', 'marginLeft': 'auto', 'marginRight': 'auto' }} alt={`SolutionImage ${puzzle.puzzleId}`} />\n              }\n            </>\n          } />\n        }\n\n        <FacebookComments puzzleId={puzzle.puzzleId} />\n\n\n        <br />\n        <div style={{ marginBottom: `50px` }}>\n          <table style={{ width: `100%`, tableLayout: `fixed` }}>\n            <tbody>\n              <tr>\n                <td>\n\n                  {/* TODO: fix this margin */}\n                  {previousPuzzleRoute && (\n                    <Link style={{ float: `left` }} to={previousPuzzleRoute} className={\"btn  btn-sm link-white smooth\"}>Previous</Link>\n                  )}\n                </td>\n\n                {/* like button here */}\n                <td>\n\n                  {nextPuzzleRoute && (\n                    <Link style={{ float: `right` }} to={nextPuzzleRoute} className={\"btn  btn-sm link-white smooth\"}>Next Puzzle</Link>\n                  )}\n                </td>\n\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <br /><br />\n      </div></div></div></div>\n    </Layout>\n  )\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","id","label","content","backgroundColor","onToggle","isHidden","setIsHidden","useState","style","display","className","onClick","puzzleId","loadComments","setLoadComments","useEffect","window","FB","XFBML","parse","fbAsyncInit","init","appId","cookie","xfbml","version","d","s","js","fjs","getElementsByTagName","getElementById","createElement","parentNode","insertBefore","document","URL","stringifyPosition","position","point","index","line","column","pos","start","end","VFileMessage","Error","reason","place","origin","parts","super","undefined","indexOf","slice","this","message","stack","fatal","source","ruleId","file","actual","expected","url","note","path","basename","ext","TypeError","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","segments","joined","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","error","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","buffer","data","messages","history","stored","map","prop","includes","assertNonEmpty","push","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","output","fn","middleware","called","wrapped","parameters","fnExpectsCallback","done","apply","exception","Promise","then","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","plugin","plugins","entry","doc","vfile","assertParser","newable","String","node","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","type","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","children","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","all","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","blankLine","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","normalizeIdentifier","replace","toLowerCase","toUpperCase","definition","identifier","labelAfter","titleConstruct","defined","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelStartLink","hardBreakEscape","codeText","gap","tailExitIndex","headEnterIndex","extensions","combineExtensions","concat","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","head","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","combined","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","any","anyFactory","propsFactory","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","parent","pointStart","pointEnd","clean","footnoteReference","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","trimLines","last","lines","trimLine","codePointAt","handlers","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","shift","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","props","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","property","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","whitespace","thing","valid","dash","cap","find","schema","Type","charAt","rest","camelcase","dashes","kebab","hastToReact","input","trim","split","tokens","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","addProperty","listDepth","component","components","basic","linkTarget","inline","level","transformImageUri","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","padRight","padLeft","v","styleReplacer","parseStyle","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","mathFlow","metaBefore","metaAfter","nonLazyContinuation","beforeNonLazyContinuation","tokenizeClosingFence","beforeContentChunk","contentChunk","sequenceClose","afterSequenceClose","mathText","single","singleDollarTextMath","resolveMathText","patternCompile","_compiled","RegExp","character","patternInScope","listInScope","inConstruct","notInConstruct","none","numerical","a","b","escapeBackslashes","expression","positions","whole","mathToMarkdown","inlineMath","peek","unsafe","math","safeOptions","raw","tracker","lineShift","move","track","repeat","substring","longestStreak","subexit","infos","sort","encode","safe","remarkMath","mathFlowFenceMeta","mathFlowFence","mathFlowValue","exitMathData","mathTextData","mathFromMarkdown","convertElement","tagNameFactory","findAfter","searchLineFeeds","searchTabOrSpaces","br","p","row","notRendered","blockOrCaption","innerTextCollection","inferWhitespace","breakBefore","breakAfter","collectElement","collectText","collectPreText","trimAndCollapseSpacesAndTabs","webNamespaces","buttonTypes","core","defaultTagName","caseSensitive","createAdjustMap","selector","subvalue","parseSelector","isProperties","addChild","isNaN","parsePrimitive","finalResult","h","transformed","nodeType","namespaceURI","getAttributeNames","getAttribute","nodeValue","afterTransform","childNodes","DOMParser","fromHtmlIsomorphic","template","parseFragment","parseFromString","rehypeKatex","throwOnError","element","classes","displayMode","block","toText","katex","error_","errorColor","strict","ComponentToDisplayMarkdown","markdown","Puzzle","pageContext","puzzle","puzzlesYaml","previousPuzzleRoute","nextPuzzleRoute","category","difficulty","querySelectorAll","forEach","button","addEventListener","log","classList","contains","toggle","Helmet","marginTop","marginBottom","padding","margin","Link","maxWidth","question","questionImage","hint","answer","solution","solutionImage","tableLayout","float","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","lineno","updatePosition","Position","errorsList","msg","err","filename","silent","re","m","comments","c","val","ret","decl","decls","declarations","isBuffer","u","for","e","f","g","l","n","q","t","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","StyleToObject","hasIterator","len"],"sourceRoot":""}