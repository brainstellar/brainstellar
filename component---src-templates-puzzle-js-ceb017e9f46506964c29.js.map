{"version":3,"file":"component---src-templates-puzzle-js-ceb017e9f46506964c29.js","mappings":"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","sources":["webpack://brainstellar/./src/components/seo.js","webpack://brainstellar/./src/components/Button.js","webpack://brainstellar/./src/components/FacebookComments.js","webpack://brainstellar/./src/templates/puzzle.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, url, image }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n  const imageUrl = `${site.siteMetadata.siteUrl}${image || '/logo.png'}`\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image\" content={imageUrl} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n    </>\n  )\n}\n\nexport default Seo\n","\nimport React, { useState } from 'react';\n\n\nconst Button = ({ id, label, content, backgroundColor, onToggle, passClass }) => {\n  const [isHidden, setIsHidden] = useState(true);\n\n  const toggleContent = () => {\n    setIsHidden(!isHidden);\n    onToggle && onToggle(); // Call the onToggle prop if it exists\n  };\n\n  return (\n    <>\n      <div>\n        <button style={{ display: `inline-block` }} id={`${id}Button`} className={`push ${isHidden ? '' : 'pushed'}`} onClick={toggleContent}>{label}</button>\n        <span id={id} className={isHidden ? 'hidden' : `unhidden ${passClass}`}>\n          <div className=\"around\" style={{ backgroundColor: backgroundColor }}>\n            {content}\n          </div>\n        </span>\n      </div>\n    </>\n  );\n}\n\nexport default Button;\n","import React, { useEffect, useState } from 'react';\nimport Button from '../components/Button';\n\nconst FacebookComments = ({ puzzleId }) => {\n  const [loadComments, setLoadComments] = useState(false);\n\n  useEffect(() => {\n    if (loadComments) {\n      if (window.FB) {\n        window.FB.XFBML.parse(); // Reload the comments plugin\n      } else {\n        window.fbAsyncInit = function () {\n          window.FB.init({\n            appId: '685807501512723',\n            cookie: true,\n            xfbml: true,\n            version: 'v12.0'\n          });\n        };\n        (function (d, s, id) {\n          var js, fjs = d.getElementsByTagName(s)[0];\n          if (d.getElementById(id)) { return; }\n          js = d.createElement(s); js.id = id;\n          js.src = \"https://connect.facebook.net/en_US/sdk.js\";\n          fjs.parentNode.insertBefore(js, fjs);\n        }(document, 'script', 'facebook-jssdk'));\n      }\n    }\n  }, [loadComments]);\n\n  if (!loadComments) {\n    return (\n      <Button\n        id={`comments${puzzleId}`}\n        label=\"Comments\"\n        onToggle={() => setLoadComments(true)}\n        backgroundColor={`white`}\n      />\n    );\n  }\n\n  const URL = `http://brainstellar.com/puzzles/${puzzleId}`\n  return (\n\n    <Button\n      id={`comments${puzzleId}`}\n      label=\"Comments\"\n      content={\n        <>\n          <div className=\"fb-like\" data-href={URL} data-layout=\"standard\" data-action=\"like\" data-size=\"small\" data-show-faces=\"true\" data-share=\"false\"></div>\n          <div className=\"fb-save\"\n            data-uri={URL}\n            data-size=\"small\">\n          </div>\n          <div>\n            <div className=\"fb-comments\" data-href={URL} data-width=\"\" data-numposts=\"5\"></div>\n          </div>\n        </>\n      }\n      onToggle={null}\n      backgroundColor={`white`}\n    />\n  );\n}\n\nexport default FacebookComments;\n","import React, { useEffect, useState } from 'react'\nimport { graphql, Link } from 'gatsby'\nimport Layout from '../components/layout'\nimport { Helmet } from \"react-helmet\";\nimport Button from '../components/Button';\nimport FacebookComments from '../components/FacebookComments';\nimport Seo from '../components/seo';\n\n\nimport 'katex/dist/katex.min.css'; // important: this styles the math output\n\n\nexport const query = graphql`\n  query($puzzleId: Int!) {\n    markdownRemark(frontmatter: { puzzleId: { eq: $puzzleId } }) {\n      html\n      frontmatter {\n        puzzleId\n        difficulty\n        category\n        title\n      }\n    }\n  }\n`\n\nconst splitContent = (htmlContent) => {\n  const parts = htmlContent.split(/<h2>(.*?)<\\/h2>/);\n  let question, hint, answer, solution;\n\n  for (let i = 1; i < parts.length; i += 2) {\n    const section = parts[i];\n    const content = parts[i + 1];\n\n    if (section === 'Question') question = content;\n    else if (section === 'Hint') hint = content;\n    else if (section === 'Answer') answer = content;\n    else if (section === 'Solution') solution = content;\n  }\n\n  if (question && question.trim() === '') { question = undefined };\n  if (hint && hint.trim() === '') { hint = undefined };\n  if (answer && answer.trim() === '') { answer = undefined };\n  if (solution && solution.trim() === '') { solution = undefined };\n\n  // console.log({ question, hint, answer, solution });\n  return { question, hint, answer, solution };\n}\n\n\nconst stripHtml = html => {\n  const doc = new DOMParser().parseFromString(html, 'text/html');\n  return doc.body.textContent || \"\";\n}\n\n\nexport default function Puzzle({ data, pageContext }) {\n  // const puzzleNode = data.allMarkdownRemark.edges[0].node;  // The first node matched by the query\n\n  // const puzzle = data.allMarkdownRemark.edges[0].node.frontmatter\n  // const rawMarkdown = data.allMarkdownRemark.edges[0].node.body;\n  // const html = puzzleNode.html; // HTML content\n  // const puzzle = puzzleNode.frontmatter; // Metadata\n  const puzzle = data.markdownRemark.frontmatter\n  const rawMarkdownBody = data.markdownRemark.html\n\n  const { question, hint, answer, solution } = splitContent(rawMarkdownBody);\n  const description = stripHtml(question);\n\n  const { previousPuzzleRoute, nextPuzzleRoute, category, difficulty } = pageContext\n\n  useEffect(() => {\n    document.querySelectorAll('.push').forEach(button => {\n      button.addEventListener('click', function () {\n        const content = document.getElementById(this.id.replace('Button', ''))\n        if (content) {\n          const isHidden = content.classList.contains('hidden')\n          content.classList.toggle('hidden', !isHidden)\n          content.classList.toggle('unhidden', isHidden)\n          this.classList.toggle('pushed', isHidden)\n          this.classList.toggle('push', !isHidden)\n        }\n      })\n    })\n\n  }, [])\n\n\n\n\n  return (\n    <Layout>\n      <Seo title={puzzle.title} description={description} />\n      <Helmet>\n        <link rel=\"icon\" href=\"/favicon.gif\" />\n        <title>{puzzle.title} | Brainstellar Puzzles</title>\n      </Helmet>\n      <div className=\"stylishpage\"><div className=\"bord1\"><div className=\"bord2\"><div className=\"container\">\n        {category && <h2 style={{ textAlign: `center`, marginTop: `1.5em`, marginBottom: `1em` }}>{category} puzzles</h2>}\n\n        {difficulty && <h2 style={{ textAlign: `center`, marginTop: `1.5em`, marginBottom: `1em` }}>{difficulty} puzzles</h2>}\n\n\n        <br /><br />\n\n        <table style={{ border: '0px solid black', width: '100%', padding: '0px', margin: '0px' }}>\n          <tbody>\n            <tr style={{ padding: '0px', margin: '0px' }}>\n              <td style={{ padding: '0px', margin: '0px', border: '0px solid black', width: '20%', text: '' }}>\n                <Link className={`btn  btn-sm btn-${puzzle.difficulty} smooth`} to={`/puzzles/${puzzle.difficulty}`} title={`More ${puzzle.difficulty} puzzles`}>{puzzle.difficulty}</Link>\n              </td>\n              <td style={{ padding: '0px', margin: '0px' }}>\n                <div className=\"content-text\" style={{ padding: '0px', margin: '0px', textAlign: 'center', fontSize: '1.3em' }}>\n                  <a href={`/puzzles/${puzzle.puzzleId}`} title=\"Permanent link to this post\">\n                    {puzzle.title}\n                  </a>\n                </div>\n              </td>\n              <td style={{ padding: '0px', margin: '0px', border: '0px solid black', width: '20%', maxWidth: '80px', textAlign: 'right' }}>\n                <Link className={`btn  btn-sm link-white smooth`} to={`/puzzles/${puzzle.category}`} title={`More ${puzzle.category} puzzles`}>{puzzle.category}</Link>\n\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n\n        {/* <MDXRenderer>{puzzleNode.body}</MDXRenderer> */}\n        {/* <div dangerouslySetInnerHTML={{ __html: rawMarkdownBody }} /> */}\n\n        {question && <div className=\"content-text\" style={{ marginTop: `1em`, marginBottom: `1em` }}>\n          {/* <ComponentToDisplayMarkdown markdown={rawMarkdownBody} /> */}\n          <div dangerouslySetInnerHTML={{ __html: question }} />\n        </div>}\n\n        {puzzle.questionImage && <img src={`/puzzle-images/${puzzle.questionImage}`} style={{ width: `200px`, height: 'auto', display: 'block', 'marginLeft': 'auto', 'marginRight': 'auto' }} alt={`QuestionImage ${puzzle.puzzleId}`} />}\n\n        {hint &&\n          <Button id={`hint${puzzle.puzzleId}`} label=\"Hint\" content={\n            <div dangerouslySetInnerHTML={{ __html: hint }} />\n          }\n            passClass=\"one-liner\"\n          />\n        }\n\n        {answer &&\n          <Button id={`answer${puzzle.puzzleId}`} label=\"Answer\" content={\n            <div passClass=\"one-liner\" dangerouslySetInnerHTML={{ __html: answer }} />\n          }\n            passClass=\"one-liner\"\n          />\n        }\n\n        {solution &&\n          <Button id={`solution${puzzle.puzzleId}`} label=\"Solution\" content={\n            <>\n              {/* <ComponentToDisplayMarkdown markdown={puzzle.solution} />\n              {puzzle.solutionImage &&\n                <img src={`/puzzle-images/${puzzle.solutionImage}`} style={{ width: `200px`, height: 'auto', display: 'block', 'marginLeft': 'auto', 'marginRight': 'auto' }} alt={`SolutionImage ${puzzle.puzzleId}`} />\n              } */}\n              <div class=\"solution\" dangerouslySetInnerHTML={{ __html: solution }} />\n            </>\n          } />\n        }\n\n        <FacebookComments puzzleId={puzzle.puzzleId} />\n\n\n        <br />\n        <div style={{ marginBottom: `50px` }}>\n          <table style={{ width: `100%`, tableLayout: `fixed` }}>\n            <tbody>\n              <tr>\n                <td>\n\n                  {/* TODO: fix this margin */}\n                  {previousPuzzleRoute && (\n                    <Link style={{ float: `left` }} to={previousPuzzleRoute} className={\"btn  btn-sm link-white smooth\"}>Previous</Link>\n                  )}\n                </td>\n\n                {/* like button here */}\n                <td>\n\n                  {nextPuzzleRoute && (\n                    <Link style={{ float: `right` }} to={nextPuzzleRoute} className={\"btn  btn-sm link-white smooth\"}>Next Puzzle</Link>\n                  )}\n                </td>\n\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <br /><br />\n      </div></div></div></div>\n    </Layout>\n  )\n}\n"],"names":["_ref","_site$siteMetadata","_site$siteMetadata2","description","title","url","image","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","imageUrl","siteUrl","React","name","content","property","author","id","label","backgroundColor","onToggle","passClass","isHidden","setIsHidden","useState","style","display","className","onClick","toggleContent","puzzleId","loadComments","setLoadComments","useEffect","d","s","js","fjs","window","FB","XFBML","parse","fbAsyncInit","init","appId","cookie","xfbml","version","document","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","Button","URL","splitContent","htmlContent","parts","split","question","hint","answer","solution","i","length","section","trim","undefined","stripHtml","html","DOMParser","parseFromString","body","textContent","Puzzle","data","pageContext","puzzle","markdownRemark","frontmatter","rawMarkdownBody","previousPuzzleRoute","nextPuzzleRoute","category","difficulty","querySelectorAll","forEach","button","addEventListener","this","replace","classList","contains","toggle","Layout","Seo","Helmet","rel","href","textAlign","marginTop","marginBottom","border","width","padding","margin","text","Link","to","fontSize","maxWidth","dangerouslySetInnerHTML","__html","questionImage","height","alt","class","FacebookComments","tableLayout","float"],"sourceRoot":""}